apply plugin: 'com.android.application'

def sep = File.separator
def projectDir = rootProject.projectDir.absolutePath;
def unityRootAbsolutePath = "${projectDir}${sep}unity_plugin${sep}unity_src"
def unitySrcPath = "${unityRootAbsolutePath}${sep}Assets${sep}Plugins${sep}Android"
def outAbsoluteDir = "${project.buildDir.absolutePath}${sep}intermediates${sep}unityPlugin${sep}classes"
def outJarAbsoluteDir = "${project.buildDir.absolutePath}${sep}intermediates${sep}unityPlugin"
def unityPackageAbsolutePath = "${project.buildDir.absolutePath}${sep}outputs"
def openIabVersion = '0.9.7.2'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
        versionCode 1
        versionName "1.0"

        applicationId 'org.onepf.openiab'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    //compile "org.onepf:openiab:$openIabVersion"
    compile fileTree(dir: '../OpenIAB/samples/trivialdrive/build/intermediates/exploded-aar/OpenIAB/OpenIab Library/unspecified/libs', include: '*.jar')
    compile fileTree(dir: '../OpenIAB/samples/trivialdrive/build/intermediates/exploded-aar/OpenIAB/OpenIab Library/unspecified/', include: '*.jar')
}

task buildPlugin(dependsOn: 'assembleRelease') << {
    final def unityPath = getUnityExecutablePath()
    delete fileTree(dir: unityPackageAbsolutePath , include: '*.unitypackage')
    delete fileTree(dir: outAbsoluteDir, include: "*")
    mkdir outAbsoluteDir
    mkdir unityPackageAbsolutePath

    def openIabJar = project.configurations.compile.find {
        it.name.startsWith "openiab-${openIabVersion}"
    }

    //assert openIabJar != null
    ant.unzip(src: '/Users/ben/Code/OpenIAB-Unity-Plugin/OpenIAB/samples/trivialdrive/build/intermediates/exploded-aar/OpenIAB/OpenIab Library/unspecified/classes.jar', dest: outAbsoluteDir)
    ant.unzip(src: '/Users/ben/Code/OpenIAB-Unity-Plugin/OpenIAB/samples/trivialdrive/build/intermediates/exploded-aar/OpenIAB/OpenIab Library/unspecified/libs/in-app-purchasing-1.0.3.jar', dest: outAbsoluteDir)
    //ant.unzip(src: openIabJar.absolutePath, dest: outAbsoluteDir)

//    Copy compiled unity-plugin java source
    copy {
        from "${project(':Unity Plugin').projectDir.absolutePath}" +
                "${sep}build${sep}intermediates${sep}classes${sep}release"
        into outAbsoluteDir
        include '**/*.class'
    }

    project.exec {
        commandLine 'jar'
        args 'cf'
        args "${outJarAbsoluteDir}${sep}OpenIAB-plugin.jar"
        args '-C'
        args outAbsoluteDir
        args '.'
    }

    copy {
        from outJarAbsoluteDir
        include 'OpenIAB-plugin.jar'
        into unitySrcPath
    }

    println "Unity executable: $unityPath"
    println "Unity package source root: $unityRootAbsolutePath"
    println "Unity package build: $unityPackageAbsolutePath"

    project.exec {
        commandLine unityPath
        args '-batchMode'
        args '-projectPath'
        args "${unityRootAbsolutePath}"
        args '-exportPackage'
        args "Assets${sep}OpenIAB-demo"
        args "Assets${sep}Plugins"
        args "${unityPackageAbsolutePath}${sep}OpenIAB-plugin.unitypackage"
        args '-quit'
    }
}

def getUnityExecutablePath() {
    if (project.hasProperty('unityExecutable')) {
        exePath = project.property('unityExecutable');
    } else {
        def paths = ['unityMacPath', 'unityWin86Path', 'unityWin64Path',]
        for (path in paths) {
            if (file(project.property(path)).exists()) {
                return project.property(path);
            }
        }
    }

    throw new RuntimeException("Unity not found. Please make sure Unity " +
            "is installed at default location or provide 'unityExecutable' property.");
}
